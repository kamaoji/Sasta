import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.error import BadRequest

# Logging setup for debugging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Configuration (Render рдкрд░ Environment Variables рдореЗрдВ рд╕реЗрдЯ рдХрд░реЗрдВ) ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
# рдЕрдкрдиреЗ рдЪреИрдирд▓ рдХрд╛ рдпреВрдЬрд░рдиреЗрдо @ рдХреЗ рд╕рд╛рде рд▓рд┐рдЦреЗрдВ (рдЬреИрд╕реЗ: '@MyLootChannel') рдпрд╛ ID (рдЬреИрд╕реЗ: -100123456789)
CHANNEL_ID = os.environ.get("CHANNEL_ID") 

# --- Conversation States ---
# рдмрд╛рддрдЪреАрдд рдХреЗ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдкрдбрд╝рд╛рд╡ рдХреЗ рд▓рд┐рдП States
CHECK_MEMBERSHIP, GET_NAME, GET_DEAL, GET_SCREENSHOT = range(4)

# --- Helper Function: To check if user is in the channel ---
# рдпрд╣ рдлрдВрдХреНрд╢рди рдЪреЗрдХ рдХрд░реЗрдЧрд╛ рдХрд┐ рдпреВрдЬрд░ рдЪреИрдирд▓ рдХрд╛ рдореЗрдВрдмрд░ рд╣реИ рдпрд╛ рдирд╣реАрдВ
async def is_user_member(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        # рдЕрдЧрд░ рдпреВрдЬрд░ рдореЗрдВрдмрд░, рдПрдбрдорд┐рди рдпрд╛ рдХреНрд░рд┐рдПрдЯрд░ рд╣реИ рддреЛ True
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except BadRequest:
        # рдЕрдЧрд░ рдмреЙрдЯ рдЪреИрдирд▓ рдореЗрдВ рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИ рдпрд╛ рдЪреИрдирд▓ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд╣реИ
        logger.error(f"Error: Bot is not an administrator in the channel {CHANNEL_ID} or channel is incorrect.")
        return False
    except Exception as e:
        logger.error(f"An unexpected error occurred while checking membership: {e}")
        return False

# --- Command Handlers ---

# /start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"User {user.first_name} ({user.id}) started the bot.")
    
    # рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд░ рдЪреИрдирд▓ рдХрд╛ рдореЗрдВрдмрд░ рд╣реИ рдпрд╛ рдирд╣реАрдВ
    is_member = await is_user_member(context, user.id)

    if is_member:
        # рдЕрдЧрд░ рдореЗрдВрдмрд░ рд╣реИ рддреЛ рд╕реАрдзрд╛ рд╕рд╡рд╛рд▓реЛрдВ рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ рджрд┐рдЦрд╛рдПрдБ
        keyboard = [[InlineKeyboardButton("ЁЯЪА Let's Go!", callback_data='start_submission')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_html(
            "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рд╡рд╛рд▓реЛрдВ рдХрд╛ рдЬрд╡рд╛рдм рджреАрдЬрд┐рдП:",
            reply_markup=reply_markup
        )
        return CHECK_MEMBERSHIP
    else:
        # рдЕрдЧрд░ рдореЗрдВрдмрд░ рдирд╣реАрдВ рд╣реИ рддреЛ рдЬреНрд╡рд╛рдЗрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣реЗрдВ
        keyboard = [[InlineKeyboardButton("тЬЕ Join Channel", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                    [InlineKeyboardButton("ЁЯФД Joined! Check Again", callback_data='check_join')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_html(
            f"ЁЯСЛ рдирдорд╕реНрддреЗ {user.mention_html()}!\n\nрдореИрдВ рдЖрдкрдХрд╛ <b>Loot Submit Bot</b> рд╣реВрдБ ЁЯТе\n\n"
            "рдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░рд╛ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВред",
            reply_markup=reply_markup
        )
        return CHECK_MEMBERSHIP

# --- Callback Query Handlers (Button Clicks) ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer() # рдмрдЯрди рдкрд░ рд▓реЛрдбрд┐рдВрдЧ рдмрдВрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
    user_id = query.from_user.id
    
    # рдЕрдЧрд░ рдпреВрдЬрд░ рдиреЗ "Joined! Check Again" рдмрдЯрди рджрдмрд╛рдпрд╛
    if query.data == 'check_join':
        is_member = await is_user_member(context, user_id)
        if is_member:
            keyboard = [[InlineKeyboardButton("ЁЯЪА Let's Go!", callback_data='start_submission')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдиреЗ рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИред\n\nЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рд╡рд╛рд▓реЛрдВ рдХрд╛ рдЬрд╡рд╛рдм рджреАрдЬрд┐рдП:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return CHECK_MEMBERSHIP
        else:
            await query.answer("рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдЪреИрдирд▓ рдЬреЙрдЗрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЬреЙрдЗрди рдХрд░реЗрдВред", show_alert=True)
            return CHECK_MEMBERSHIP

    # рдЕрдЧрд░ рдпреВрдЬрд░ рдиреЗ "Let's Go!" рдмрдЯрди рджрдмрд╛рдпрд╛
    elif query.data == 'start_submission':
        await query.edit_message_text(text="рд╢рд╛рдирджрд╛рд░! рдЪрд▓рд┐рдП рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВред")
        await query.message.reply_text("рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?")
        return GET_NAME

# --- Message Handlers for Conversation ---

# 1. рдирд╛рдо рд▓реЗрдирд╛
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = update.message.text
    context.user_data['name'] = user_name
    logger.info(f"Name received: {user_name}")
    await update.message.reply_text("рдмрд╣реБрдд рдЕрдЪреНрдЫреЗ! рдЕрдм рдмрддрд╛рдПрдБ, рдЖрдкрдиреЗ рдХреМрди-рд╕реА deal loot рдХреА? \nрдЙрд╕рдХрд╛ рдирд╛рдо рдпрд╛ link рдореБрдЭреЗ send рдХрд░реЗрдВред")
    return GET_DEAL

# 2. рдбреАрд▓ рдХрд╛ рдирд╛рдо/рд▓рд┐рдВрдХ рд▓реЗрдирд╛
async def get_deal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    deal_info = update.message.text
    context.user_data['deal'] = deal_info
    logger.info(f"Deal received: {deal_info}")
    await update.message.reply_text("рдЕрдм рдЙрд╕ рдкреНрд░реЛрдбрдХреНрдЯ рдХрд╛ Screenshot рднреЗрдЬрд┐рдП ЁЯУ╕")
    return GET_SCREENSHOT

# 3. рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рд▓реЗрдирд╛
async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    photo_file = await update.message.photo[-1].get_file()
    # рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдлреЛрдЯреЛ рдХреЛ рдХрд╣реАрдВ рд╕реЗрд╡ рдпрд╛ рдлреЙрд░рд╡рд░реНрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
    # await photo_file.download_to_drive('user_screenshot.jpg')
    
    logger.info(f"Screenshot received from {context.user_data.get('name')}")

    # рдзрдиреНрдпрд╡рд╛рдж рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ
    await update.message.reply_html(
        "ЁЯОЙ <b>Thank You So Much!</b> ЁЯОЙ\n\n"
        "рдЖрдкрдХреА рд╕рдмрдорд┐рд╢рди рд╣рдореЗрдВ рдорд┐рд▓ рдЧрдпреА рд╣реИред рдЖрдкрдиреЗ рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рдХрд╛рдо рдХрд┐рдпрд╛! ЁЯЩМ\n\n"
        "рдЕрдм рдмрд╕ рдереЛрдбрд╝рд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░реЗрдВред рд╡рд┐рдирд░ рдХрд╛ рдЕрдирд╛рдЙрдВрд╕рдореЗрдВрдЯ <b>Sunday рд░рд╛рдд 9 рдмрдЬреЗ</b> рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдкрд░ рд╣реЛрдЧрд╛ред\n\n"
        "Good Luck! ЁЯНА"
    )
    
    # рдмрд╛рддрдЪреАрдд рдХрд╛ рдбреЗрдЯрд╛ рд╕рд╛рдлрд╝ рдХрд░рдирд╛
    context.user_data.clear()
    return ConversationHandler.END

# /cancel Command
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВред рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд░рджреНрдж рдХрд░ рджреА рдЧрдИ рд╣реИред")
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    """Run the bot."""
    if not BOT_TOKEN or not CHANNEL_ID:
        logger.error("BOT_TOKEN or CHANNEL_ID environment variable not set!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHECK_MEMBERSHIP: [
                CallbackQueryHandler(button_handler, pattern='^check_join$'),
                CallbackQueryHandler(button_handler, pattern='^start_submission$')
            ],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deal)],
            GET_SCREENSHOT: [MessageHandler(filters.PHOTO, get_screenshot)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    
    # рдмреЙрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ
    application.run_polling()

if __name__ == '__main__':
    main()
