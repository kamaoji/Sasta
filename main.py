import logging
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode

# --- 24/7 рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реЗрдм рд╕рд░реНрд╡рд░ ---
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# --- рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди (Secrets рд╕реЗ рд▓реЗрдВрдЧреЗ) ---
# рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдЕрдкрдирд╛ рдЯреЛрдХрди рдФрд░ рджреВрд╕рд░реА рдЬрд╛рдирдХрд╛рд░реА рд╕реАрдзреЗ рдХреЛрдб рдореЗрдВ рди рдбрд╛рд▓реЗрдВ!
# Replit рдХреЗ Secrets рдлреАрдЪрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_USERNAME = os.environ.get("CHANNEL_USERNAME")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
DATA_FILE = "loot_submissions.json"

# --- рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- рд╕реНрдЯреЗрдЯреНрд╕ (рдмрд╛рддрдЪреАрдд рдХреЗ рдЪрд░рдг) ---
GET_NAME, GET_DEAL, GET_SCREENSHOT = range(3)

# --- рд╕рд╣рд╛рдпрдХ рдлрдВрдХреНрд╢рдиреНрд╕ ---
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_data(new_entry):
    data = load_data()
    data.append(new_entry)
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- рдмреЙрдЯ рдХреЗ рд╕рднреА рдлрдВрдХреНрд╢рдиреНрд╕ (рдЬреИрд╕реЗ start, get_name, рдЖрджрд┐) ---
# (рдпрд╣ рдлрдВрдХреНрд╢рди рдкрд┐рдЫрд▓реЗ рдЬрд╡рд╛рдм рдЬреИрд╕реЗ рд╣реА рд╣реИрдВ, рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ)

async def check_membership(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME.lstrip('@')}", user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        return False
    except Exception as e:
        logger.error(f"Membership check error: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    is_member = await check_membership(user.id, context)
    if not is_member:
        keyboard = [
            [InlineKeyboardButton("ЁЯФЧ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
            [InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ", callback_data="check_join_again")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("рдирдорд╕реНрддреЗ! рд▓реВрдЯ рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░рд╛ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВред", reply_markup=reply_markup)
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton("ЁЯЪА рд╕рдмрдорд┐рд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ", callback_data="start_submission")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(f"ЁЯСЛ <b>рдирдорд╕реНрддреЗ {user.first_name}!</b>\n\nрдореИрдВ рдЖрдкрдХрд╛ Loot Submit Bot рд╣реВрдБред ЁЯТе", reply_markup=reply_markup)
    return GET_NAME

async def check_join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    is_member = await check_membership(user.id, context)
    if is_member:
        keyboard = [[InlineKeyboardButton("ЁЯЪА рд╕рдмрдорд┐рд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ", callback_data="start_submission")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"ЁЯСЛ <b>рдирдорд╕реНрддреЗ {user.first_name}!</b>\n\nрдЕрдм рдЖрдк рд╕рдмрдорд┐рд╢рди рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        return GET_NAME
    else:
        await query.message.reply_text("рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВред")
        return ConversationHandler.END

async def start_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(f"рдареАрдХ рд╣реИ, {context.user_data['name']}!\n\nрдЖрдкрдиреЗ рдХреМрди-рд╕реА deal loot рдХреА? рдЙрд╕рдХрд╛ рдирд╛рдо рдпрд╛ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВред")
    return GET_DEAL

async def get_deal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['deal'] = update.message.text
    await update.message.reply_text("рд╢рд╛рдирджрд╛рд░! рдЕрдм рдЙрд╕ рдкреНрд░реЛрдбрдХреНрдЯ рдХрд╛ рдПрдХ рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬрд┐рдПред ЁЯУ╕")
    return GET_SCREENSHOT

async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    photo_file = await update.message.photo[-1].get_file()
    context.user_data['screenshot_id'] = photo_file.file_id
    await update.message.reply_html(
        "ЁЯОЙ <b>рдмрд╣реБрдд-рдмрд╣реБрдд рдзрдиреНрдпрд╡рд╛рдж!</b> ЁЯОЙ\n\nрдЖрдкрдХреА рдПрдВрдЯреНрд░реА рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдИ рд╣реИред\nрд╡рд┐рдЬреЗрддрд╛ рдХреА рдШреЛрд╖рдгрд╛ рд╣рд░ <b>рд░рд╡рд┐рд╡рд╛рд░ рд░рд╛рдд 9 рдмрдЬреЗ</b> рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдкрд░ рдХреА рдЬрд╛рдПрдЧреАред All the best! ЁЯСН"
    )
    user_info = update.effective_user
    submission_details = (
        f"<b>ЁЯФе рдирдпрд╛ рд▓реВрдЯ рд╕рдмрдорд┐рд╢рди! ЁЯФе</b>\n\n"
        f"<b>рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛:</b> @{user_info.username or 'N/A'}\n"
        f"<b>рдирд╛рдо:</b> {context.user_data.get('name')}\n"
        f"<b>рдбреАрд▓:</b> {context.user_data.get('deal')}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=submission_details, parse_mode=ParseMode.HTML)
    await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=context.user_data['screenshot_id'])
    entry = {
        "user_id": user_info.id,
        "telegram_username": user_info.username,
        "provided_name": context.user_data.get('name'),
        "deal_info": context.user_data.get('deal'),
        "screenshot_file_id": context.user_data.get('screenshot_id'),
        "timestamp": update.message.date.isoformat()
    }
    save_data(entry)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВред рдЬрдм рдЖрдк рддреИрдпрд╛рд░ рд╣реЛрдВ, рддреЛ /start рд╕реЗ рджреЛрдмрд╛рд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВред")
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(check_join_callback, pattern="^check_join_again$")],
        states={
            GET_NAME: [CallbackQueryHandler(start_submission, pattern="^start_submission$"), MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deal)],
            GET_SCREENSHOT: [MessageHandler(filters.PHOTO, get_screenshot)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False,
    )
    application.add_handler(conv_handler)
    print("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    application.run_polling()

if __name__ == "__main__":
    keep_alive() # рд╡реЗрдм рд╕рд░реНрд╡рд░ рд╢реБрд░реВ рдХрд░реЗрдВ
    main() # рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
